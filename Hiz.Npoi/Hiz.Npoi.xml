<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hiz.Npoi</name>
    </assembly>
    <members>
        <member name="F:Hiz.Extended.Npoi.BorderEdges.AllAround">
            <summary>
            所有四周边框
            </summary>
        </member>
        <member name="F:Hiz.Extended.Npoi.BorderEdges.LeftTopToRightBottom">
            <summary>
            逆对角线 (左上角 => 右下角) (left-top to right-bottom)
            NPOI.SS.UserModel.BorderDiagonal.Backward
            </summary>
        </member>
        <member name="F:Hiz.Extended.Npoi.BorderEdges.RightTopToLeftBottom">
            <summary>
            正对角线 (右上角 => 左下角) (right-top to left-bottom)
            NPOI.SS.UserModel.BorderDiagonal.Forward
            </summary>
        </member>
        <member name="F:Hiz.Extended.Npoi.BorderEdges.AllDiagonal">
            <summary>
            NPOI.SS.UserModel.BorderDiagonal.Both
            </summary>
        </member>
        <member name="F:Hiz.Extended.Npoi.BorderTemplateEdges.Top">
            <summary>
            垂直顶边
            </summary>
        </member>
        <member name="F:Hiz.Extended.Npoi.BorderTemplateEdges.Middle">
            <summary>
            垂直中线
            </summary>
        </member>
        <member name="F:Hiz.Extended.Npoi.BorderTemplateEdges.Bottom">
            <summary>
            垂直底边
            </summary>
        </member>
        <member name="F:Hiz.Extended.Npoi.BorderTemplateEdges.Left">
            <summary>
            水平左边
            </summary>
        </member>
        <member name="F:Hiz.Extended.Npoi.BorderTemplateEdges.Center">
            <summary>
            水平中线
            </summary>
        </member>
        <member name="F:Hiz.Extended.Npoi.BorderTemplateEdges.Right">
            <summary>
            水平右边
            </summary>
        </member>
        <member name="F:Hiz.Extended.Npoi.BorderTemplateEdges.AllAround">
            <summary>
            外部四边
            </summary>
        </member>
        <member name="F:Hiz.Extended.Npoi.BorderTemplateEdges.AllInside">
            <summary>
            内部中线
            </summary>
        </member>
        <member name="F:Hiz.Extended.Npoi.BorderTemplateEdges.LeftTopToRightBottom">
            <summary>
            逆对角线 (左上角 => 右下角) (left-top to right-bottom)
            NPOI.SS.UserModel.BorderDiagonal.Backward
            </summary>
        </member>
        <member name="F:Hiz.Extended.Npoi.BorderTemplateEdges.RightTopToLeftBottom">
            <summary>
            正对角线 (右上角 => 左下角) (right-top to left-bottom)
            NPOI.SS.UserModel.BorderDiagonal.Forward
            </summary>
        </member>
        <member name="F:Hiz.Extended.Npoi.BorderTemplateEdges.AllDiagonal">
            <summary>
            NPOI.SS.UserModel.BorderDiagonal.Both
            </summary>
        </member>
        <member name="T:Hiz.Extended.Npoi.BorderTemplate">
            <summary>
            边框批量设置模板
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.BorderTemplate.TopStyle">
            <summary>
            垂直顶边样式
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.BorderTemplate.TopColor">
            <summary>
            垂直顶边颜色
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.BorderTemplate.MiddleStyle">
            <summary>
            垂直中线样式
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.BorderTemplate.MiddleColor">
            <summary>
            垂直中线颜色
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.BorderTemplate.BottomStyle">
            <summary>
            垂直底边样式
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.BorderTemplate.BottomColor">
            <summary>
            垂直底边颜色
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.BorderTemplate.LeftStyle">
            <summary>
            水平左边样式
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.BorderTemplate.LeftColor">
            <summary>
            水平左边颜色
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.BorderTemplate.CenterStyle">
            <summary>
            水平中线样式
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.BorderTemplate.CenterColor">
            <summary>
            水平中线颜色
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.BorderTemplate.RightStyle">
            <summary>
            水平右边样式
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.BorderTemplate.RightColor">
            <summary>
            水平右边颜色
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.BorderTemplate.Diagonal">
            <summary>
            对角线条组合
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.BorderTemplate.DiagonalStyle">
            <summary>
            对角线条样式
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.BorderTemplate.DiagonalColor">
            <summary>
            对角线条颜色
            </summary>
        </member>
        <member name="T:Hiz.Extended.Npoi.CellValueConverter">
            <summary>
            单元格的值转换器
            </summary>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.GetCellTypeFinally(NPOI.SS.UserModel.ICell)">
            <summary>
            获取单元格值最终类型, 如果含有公式, 则返回计算结果的类型.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.GetCellValue``1(NPOI.SS.UserModel.ICell,``0)">
            <summary>
            获取单元格值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cell"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.GetCellStyles(NPOI.SS.UserModel.IWorkbook)">
            <summary>
            枚举当前表格文档所有内建的单元格样式.
            </summary>
            <param name="workbook"></param>
            <returns></returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.SetFill(NPOI.SS.UserModel.ICellStyle,System.Nullable{NPOI.SS.UserModel.FillPattern},Hiz.Extended.Npoi.NpoiColor,Hiz.Extended.Npoi.NpoiColor)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <param name="pattern">图案样式; null: 不作修改; default: NoFill;</param>
            <param name="foreground">图案颜色; null: 不作修改; default: Automatic;</param>
            <param name="background">背景颜色; null: 不作修改; default: Automatic;</param>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.SetTextAlignment(NPOI.SS.UserModel.ICellStyle,System.Nullable{NPOI.SS.UserModel.HorizontalAlignment},System.Nullable{System.Int16},System.Nullable{NPOI.SS.UserModel.VerticalAlignment},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int16})">
            <summary>
            设置对齐
            </summary>
            <param name="style"></param>
            <param name="horizontal">水平对齐; null: 不作修改; default: General;</param>
            <param name="indention">水平缩进; null: 不作修改; default: 0;</param>
            <param name="vertical">垂直对齐; null: 不作修改; default: Bottom;</param>
            <param name="wrap">自动换行; null: 不作修改; default: false;</param>
            <param name="shrink">自动缩小字体填充; null: 不作修改; default: false;</param>
            <param name="rotation">文字旋转角度; null: 不作修改; default: 0;</param>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.SetBorders(NPOI.SS.UserModel.ICellStyle,Hiz.Extended.Npoi.BorderEdges,System.Nullable{NPOI.SS.UserModel.BorderStyle},Hiz.Extended.Npoi.NpoiColor)">
            <summary>
            设置边框
            </summary>
            <param name="style"></param>
            <param name="edges">边框组合</param>
            <param name="type">边框样式; null: 不作修改; default: None;</param>
            <param name="color">边框颜色; null: 不作修改; default: Black;</param>
            <example>
            // 添加顶边以及左边框线
            style.SetBorders(BorderSides.Top | BorderSides.Left, BorderStyle.Thin, "Black");
            // 添加四周边框
            style.SetBorders(BorderSides.AllAround, BorderStyle.Thin, "Red");
            // 添加逆对角线
            style.SetBorders(BorderSides.LeftTopToRightBottom, BorderStyle.Thin, "Blue");
            </example>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.GetFonts(NPOI.SS.UserModel.IWorkbook)">
            <summary>
            枚举当前表格文档所有内建字体.
            </summary>
            <param name="workbook"></param>
            <returns></returns>
            <remarks>
            http://poi.apache.org/apidocs/org/apache/poi/ss/usermodel/Font.html
            </remarks>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.GetOrAddFont(NPOI.SS.UserModel.IWorkbook,System.String,System.Single,System.Boolean,System.Boolean,NPOI.SS.UserModel.FontUnderlineType,System.Boolean,NPOI.SS.UserModel.FontSuperScript,Hiz.Extended.Npoi.NpoiColor)">
            <summary>
            获取 或者 添加 指定属性字体.
            </summary>
            <param name="workbook"></param>
            <param name="name">字体名称; default: XSSFWorkbook=Calibri / HSSFWorkbook=Arial;</param>
            <param name="size">字号 FontHeightInPoints; default: XSSFWorkbook=11.0 / HSSFWorkbook=10.0;</param>
            <param name="bold">粗体; default: false</param>
            <param name="italic">斜体; default: false</param>
            <param name="underline">下划; default: None</param>
            <param name="strikeout">删除; default: false</param>
            <param name="offset">上标下标; default: None</param>
            <param name="color">字体颜色; default: XSSFWorkbook=Black / HSSFWorkbook=0x7FFF;</param>
            <returns></returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.GetDefaultFont(NPOI.SS.UserModel.IWorkbook)">
            <summary>
            获取默认字体
            </summary>
            <param name="workbook"></param>
            <returns></returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.SetDefaultFont(NPOI.SS.UserModel.IWorkbook,System.String,System.Single,System.Boolean,System.Boolean,NPOI.SS.UserModel.FontUnderlineType,System.Boolean,NPOI.SS.UserModel.FontSuperScript,Hiz.Extended.Npoi.NpoiColor)">
            <summary>
            修改默认字体
            </summary>
            <param name="workbook"></param>
            <param name="name">字体名称; default: XSSFWorkbook=Calibri / HSSFWorkbook=Arial;</param>
            <param name="size">字号 FontHeightInPoints; default: XSSFWorkbook=11.0 / HSSFWorkbook=10.0;</param>
            <param name="bold">粗体; default: false</param>
            <param name="italic">斜体; default: false</param>
            <param name="underline">下划; default: None</param>
            <param name="strikeout">删除; default: false</param>
            <param name="offset">上标下标; default: None</param>
            <param name="color">字体颜色; null: 不作修改; default: XSSFWorkbook=Black / HSSFWorkbook=0x7FFF;</param>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.GetColorIndexed(NPOI.HSSF.UserModel.HSSFWorkbook,Hiz.Extended.Npoi.NpoiColor,System.Boolean)">
            <summary>
            
            </summary>
            <param name="workbook"></param>
            <param name="color"></param>
            <param name="similar">如果精确查找不到, 是否查找相近颜色;</param>
            <returns></returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.GetFormats(NPOI.SS.UserModel.IWorkbook,System.Boolean)">
            <summary>
            获取所有数据格式.
            </summary>
            <param name="workbook"></param>
            <param name="builtin">是否包含内建格式</param>
            <returns></returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.GetColumnCode(System.Int32)">
            <summary>
            根据 列的索引 获取 列的代号 (例如: 0=A; 1=B; 26=AA;)
            </summary>
            <param name="index">[0, 0x4000)</param>
            <returns></returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.ApplyBorderTemplate(NPOI.SS.UserModel.ISheet,Hiz.Extended.Npoi.BorderTemplate,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            批量应用边框模板
            </summary>
            <param name="sheet"></param>
            <param name="template">模板配置</param>
            <param name="x">起始列的索引; 从零开始;</param>
            <param name="y">起始行的索引; 从零开始;</param>
            <param name="width">列数; 至少一列;</param>
            <param name="height">行数; 至少一行;</param>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.GetCells(NPOI.SS.UserModel.IRow)">
            <summary>
            遍历行单元格; 推荐改用 foreach(var cell in row) {...}
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.IsEmpty(NPOI.SS.UserModel.IRow)">
            <summary>
            是否空行 (至少有一个含有有效值的单元格, 才不算作空行; 对于字符串单元格, 如果文本只有空格, 也当无效处理;
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.RemoveAllCells(NPOI.SS.UserModel.IRow)">
            <summary>
            清空本行的所有单元格.
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.RemoveAllCellsValues(NPOI.SS.UserModel.IRow)">
            <summary>
            清空本行的所有单元格的值.
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.GetRows(NPOI.SS.UserModel.ISheet)">
            <summary>
            枚举当前表单所有的有效行;
            HSSFSheet: 按创建的顺序输出;
            XSSFSheet: 按索引的顺序输出;
            </summary>
            <param name="sheet"></param>
            <returns></returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.GetFirstRowIndex(NPOI.SS.UserModel.ISheet)">
            <summary>
            返回第一个有效行的行索引; -1: 无任何行;
            </summary>
            <param name="sheet"></param>
            <returns></returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.GetLastRowIndex(NPOI.SS.UserModel.ISheet)">
            <summary>
            返回最末个有效行的行索引; -1: 无任何行;
            </summary>
            <param name="sheet"></param>
            <returns></returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.GetOrAddRow(NPOI.SS.UserModel.ISheet,System.Int32)">
            <summary>
            获取指定索引的行, 若没有则新建.
            </summary>
            <param name="sheet"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.AddRow(NPOI.SS.UserModel.ISheet)">
            <summary>
            在最末行后面追加新行.
            </summary>
            <param name="sheet"></param>
            <returns></returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.InsertRowRange(NPOI.SS.UserModel.ISheet,System.Int32,System.Int32)">
            <summary>
            插入指定行数, 插入位置后面的行全部下移.
            </summary>
            <param name="sheet"></param>
            <param name="index">插入起始索引</param>
            <param name="count">行数</param>
            <returns></returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.RemoveRowRangeWithEmpty(NPOI.SS.UserModel.ISheet,System.Int32,System.Int32)">
            <summary>
            删除指定范围空行, 并将后面的有效行上移;
            </summary>
            <param name="sheet"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Hiz.Extended.Npoi.NpoiExtensions.RemoveRowRange(NPOI.SS.UserModel.ISheet,System.Func{NPOI.SS.UserModel.IRow,System.Boolean},System.Int32,System.Int32,System.Boolean)”忽略有格式错误的 XML 注释 -->
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.EvaluateColumnWidthInPixels(NPOI.SS.UserModel.ISheet,System.Single)">
            <summary>
            
            </summary>
            <param name="sheet"></param>
            <param name="pixels"></param>
            <returns>In units of 1/256th of a character width</returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.GetOrAddDataFormat(NPOI.SS.UserModel.IWorkbook,System.String)">
            <summary>
            查找或者新增格式, 然后返回格式索引.
            </summary>
            <param name="workbook"></param>
            <param name="format">数据格式</param>
            <returns>DataFormat.Index</returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiExtensions.GetOrAddSheet(NPOI.SS.UserModel.IWorkbook,System.String)">
            <summary>
            获取或添加指定名称的标签
            </summary>
            <param name="workbook"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Hiz.Extended.Npoi.CellStyleEqualityComparer">
            <summary>
            单元格样式相等比较器
            </summary>
        </member>
        <member name="T:Hiz.Extended.Npoi.CopyCellStyle">
            <summary>
            CellStyle 字段
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.NpoiColor.Indexed">
            <summary>
            Excel 标准调色盘的颜色索引
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.NpoiColor.Name">
            <summary>
            颜色名称
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.NpoiColor.ArgbValue">
            <summary>
            颜色的值; 等效 System.Drawing.Color.ToArgb();
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.NpoiColor.Argb">
            <summary>
            如果不含透明通道(Alpha = 0xFF) 那么 Argb.Length = 3 (等效 IndexedColors.RGB);
            否则 = 4; Automatic 始终 = 4;
            </summary>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiColor.TryParse(System.String,Hiz.Extended.Npoi.NpoiColor@)">
            <summary>
            解析颜色名字 或者 十六进制文本
            </summary>
            <param name="value">颜色名称(不区分大小写) 或者 十六进制文本(RRGGBB/AARRGGBB/#RRGGBB/#AARRGGBB; 不区分大小写)</param>
            <param name="color"></param>
            <returns>如果该颜色是标准颜色, 返回色盘索引 IndexedColors.Index; 0: Parse successful but not IndexedColor; -1: Invalid String;</returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiColor.GetArgbValue(System.Byte[],System.Boolean)">
            <summary>
            等效 System.Drawing.Color.ToArgb();
            </summary>
            <param name="argb">argb 字节数组仅限 3/4 长度</param>
            <param name="alpha">是否包含 Alpha 通道; 如果 alpha = true 但是 argb 参数不含 Alpha 通道, 则将 Alpha 当作 0xFF;</param>
            <returns>alpha = true: 0xAARRGGBB; alpha = false: 0x00RRGGBB.</returns>
        </member>
        <member name="M:Hiz.Extended.Npoi.NpoiColor.Equals(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            比较颜色
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="alpha">是否比较 Alpha 通道</param>
            <returns></returns>
        </member>
        <member name="T:Hiz.Extended.Npoi.NpoiColorIndex">
            <summary>
            Excel 标准调色盘的颜色
            </summary>
        </member>
        <member name="T:Hiz.Extended.Npoi.CellBorderOptions">
            <summary>
            单元格的边框配置
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.CellStyleOptions.DataFormat">
            <summary>
            格式
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.CellStyleOptions.TextAlignment">
            <summary>
            对齐
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.CellStyleOptions.Font">
            <summary>
            字体
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.CellStyleOptions.Border">
            <summary>
            边框
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.CellStyleOptions.Fill">
            <summary>
            图案
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.CellStyleOptions.IsHidden">
            <summary>
            是否隐藏
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.CellStyleOptions.IsLocked">
            <summary>
            是否锁定
            </summary>
        </member>
        <member name="T:Hiz.Extended.Npoi.FontOptions">
            <summary>
            字体配置
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.FontOptions.FontName">
            <summary>
            字体名称 (System.Drawing.Font.Name)
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.FontOptions.FontHeightInPoints">
            <summary>
            字体大小 (float System.Drawing.Font.SizeInPoints)
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.FontOptions.IsBold">
            <summary>
            粗体 (bool System.Drawing.Font.Bold)
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.FontOptions.IsItalic">
            <summary>
            斜体 (bool System.Drawing.Font.Italic)
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.FontOptions.IsStrikeout">
            <summary>
            删除线条 (bool System.Drawing.Font.Strikeout)
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.FontOptions.Underline">
            <summary>
            下划线条 (bool System.Drawing.Font.Underline)
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.FontOptions.TypeOffset">
            <summary>
            上标下标 (System.Drawing.Font NotSupported)
            </summary>
        </member>
        <member name="P:Hiz.Extended.Npoi.FontOptions.Color">
            <summary>
            字体颜色
            </summary>
        </member>
        <member name="M:Hiz.Extended.Npoi.FontOptions.#ctor(System.String,System.Single)">
            <summary>
            字体配置
            </summary>
            <param name="name">字体名称</param>
            <param name="size">字号 (FontHeightInPoints)</param>
        </member>
        <member name="F:Hiz.Extended.Npoi.OfficeArchiveFormat.None">
            <summary>
            未知 / 不作指定 / 按后缀名自动判断;
            </summary>
        </member>
        <member name="F:Hiz.Extended.Npoi.OfficeArchiveFormat.Binary">
            <summary>
            Office 2003 以之前的版本
            </summary>
        </member>
        <member name="F:Hiz.Extended.Npoi.OfficeArchiveFormat.OpenXml">
            <summary>
            Office 2007 及之后的版本
            </summary>
        </member>
        <member name="M:Hex.EncodeHexString(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            编码
            reverse = false: new byte[] { 0x01, 0x02, 0x03, 0x04 } => "01020304"; 等效 System.BitConverter.ToString().Replace("-", null);
            reverse = true : new byte[] { 0x01, 0x02, 0x03, 0x04 } => "04030201";
            例如:
            int value = 0x01020304;
            var bytes = BitConverter.GetBytes(value); // new byte[] { 0x04, 0x03, 0x02, 0x01 }; // LittleEndian;
            var hex1 = BitConverter.ToString(bytes).Replace("-", null); // "04030201"; // 正序
            var hex2 = value.ToString("X"); // "01020304"; // 倒序: BitConverter.ToString(BitConverter.GetBytes(value).Reverse()).Replace("-", null);
            </summary>
            <param name="bytes"></param>
            <param name="start">起始索引</param>
            <param name="length">字节长度; -1: 从起始索引至数组末尾(length = bytes.Length - start)</param>
            <param name="lower">true: 输出大写; false: 输出小写.</param>
            <param name="reverse">是否倒序输出结果</param>
            <returns>byte[0] = String.Empty;</returns>
        </member>
        <member name="M:Hex.DecodeHexString(System.String,System.Boolean)">
            <summary>
            解码
            </summary>
            <param name="value"></param>
            <param name="reverse">是否倒序输出结果</param>
            <returns></returns>
        </member>
        <member name="M:Hex.IsHexString(System.String)">
            <summary>
            是否 十六进制的字符串
            </summary>
            <param name="value"></param>
            <returns>
            String.Empty 返回假值.
            </returns>
        </member>
    </members>
</doc>
